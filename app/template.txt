// 'url', default URL, depends on the analyzer running online or local
// 'Canvas', 'View', 'SocketIO' & 'Object3' from AWV3-next
// 'log' (.start(), .stop(message) & .printResults(string || object))

// Run a couple of connections
let tasks = [];
for (let i = 0; i < 1; i++) {
    tasks.push(new SocketIO().connect(url).then(connection => {

        // Clear scene
        view.scene.destroy();

        // Execute tasks and disconnect
        return connection.execute(`

// Init tooldesigner and load tool
_C.ToolDesigner3d.InitApplication("Drawings/3dToolDesigner/3dToolDesigner.of1");
_O.ToolDesigner3d.LoadExistingTool("Drawings/ISO_Tool/Demo_Tool.of1");
RETURN _O.ToolDesigner3d.GetComponentParams("EXTENSION");

        `)
        .then(context => addModels(context, "Task 1"))
        .then( () => connection.execute(`

// Change extension and return new dimensions
_O.ToolDesigner3d.SetComponentParams("EXTENSION",["LB", "BD"],[50, 100]);
RETURN CADH_JSONTreeExportStr(_O.Demo_Tool);

        `))
        .then( context => addModels(context, "Task 2"))
        .then( () => connection.disconnect());
    }));
}

log.start();
Promise.all(tasks).then( () => log.stop("Tasks completed!"));

function addModels(context, descr = "") {
    log.printResults(descr);
    log.printResults(context.results);
    let object = new Object3(context.models);
    view.scene.add(object);
    view.updateBounds().controls.zoom().focus();
}
